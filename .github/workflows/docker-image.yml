name: Publish Docker image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Step to set up Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step to build the Java application
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Install git to fetch tags
      - name: Set up Git
        run: sudo apt-get update && sudo apt-get install -y git

      # Fetch all tags to increment version
      - name: Fetch Git tags
        run: git fetch --tags

      # Determine the next version based on the latest Git tag
      - name: Determine Docker image version
        id: version
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v2.0.0")
          echo "Latest tag: $latest_tag"
          
          # Strip 'v' and split the version into parts (e.g., v2.0.1 -> 2.0.1)
          latest_version=${latest_tag#v}
          major=$(echo $latest_version | cut -d. -f1)
          minor=$(echo $latest_version | cut -d. -f2)
          patch=$(echo $latest_version | cut -d. -f3)
          
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "New version: $new_version"
          
          # Set version as output
          echo "::set-output name=version::$new_version"

      # Check if the tag exists, and only tag if it doesn't
      - name: Check if Git tag exists
        id: tag_check
        run: |
          if git rev-parse ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
            echo "Tag exists"
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Tag does not exist"
            echo "exists=false" >> $GITHUB_ENV
          fi

      # Build the Docker image with the new version tag and 'latest' tag
      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --tag visimihasi/ossasea-app:${{ steps.version.outputs.version }}
          docker tag visimihasi/ossasea-app:${{ steps.version.outputs.version }} visimihasi/ossasea-app:latest

      # Log in to Docker Hub using secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Push the Docker image with both version and 'latest' tags to Docker Hub
      - name: Push Docker image
        run: |
          docker push visimihasi/ossasea-app:${{ steps.version.outputs.version }}
          docker push visimihasi/ossasea-app:latest

      # Create a new Git tag and push it only if it doesn't already exist (versioned tag only)
      - name: Tag the repository with version
        if: env.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}